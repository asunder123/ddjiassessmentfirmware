# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ,*]
  create:
    branches: [master]  
  pull_request:
    branches: [ master ]
 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: pwd
  
      #- name: Open Telegraf port
       # working-directory: ${{runner.workspace-directory}}
       # shell: bash
        #run:  sudo ufw allow 8000:8086/tcp
         
      - name: Change to working directory
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: cd ${{runner.workspace-directory}}
        
      - name: List all directories
        working-directory:  ${{runner.workspace-directory}}
        shell : bash
        run: ls -ltr

      - name: Login to DockerHub
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: docker login -u asunder123 -p Docker@123

    
      
      - name: Build a docker file
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: docker build .
    
        
      - name: List docker images
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: docker images 
        
      - name: Docker run python file 
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: docker run python:3
       
      - name: Docker run alpine file 
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: docker run alpine:3.8   
        
        
      - name: Docker run node
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: docker run node:12 -p 8084
        
      - name: Docker run node
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: docker run node:10 -p 8085
        
      - name: Fetch influxdb
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: docker pull influxdb
        
      - name: Docker run telegraf 
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run:  docker run -p 8086:8086 -v $PWD:/var/lib/influxdb influxdb
             
        

        
      - name: List Directories recursively
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run:  ls -ltr
        
    
      
      
      - name: QAllow TCP Port 8086
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: sudo ufw allow 8000:8086/tcp
        
      - name: Allow Http
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: sudo ufw allow http
        
      - name: Create influx db socket
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: sudo docker network create influxdb
         
              
           
      #- name: Run Telegraf
      # working-directory: ${{runner.workspace-directory}}
       # shell: bash
       # run: sudo docker run telegraf
      
      - name:  Consul logs
        working-directory: ${{runner.workspace-directory}}
        shell: bash
        run: |
              docker pull consul
              docker run -d --name=dev-consul -e CONSUL_BIND_INTERFACE=eth0 consul
              docker exec -t  dev-consul consul members
              docker ps -a 
              docker netstat -ano

      
            
        
        
   
        
            
